/**
 * This file generated by PropelJS: https://github.com/AthensFramework/PropelJS
 *
 * Example use:
 * ```
 * var db = main.propelJS({baseAddress:'/api/'});
 *
 * db.configs(2)
 *      .get()
 *      .then(
 *          function(config) {
 *              config.setValue('example-value').save();
 *          }
 *      );
 *
 * myNewConfig = db.configs();
 * myNewConfig.setValue('example-value')
 *      .save()
 *      .then(
 *          function(config) {
 *              console.log(config.getId());
 *          }
 *      );
 * ```
 *
 * Of course, this auto-generated example may not work correctly if your model
 * includes additional required fields, etc.
 *
 * See the documentation at https://github.com/AthensFramework/PropelJS
 *
 * Do not edit this file; any changes will be overwritten the next time
 * you run `propel model:build`.
 */

var main = {};

main.propelJS = (function() {

    var baseAddress = '';
    var headers = {};

    var doAJAX = function(method, relativeAddress, data) {

        return $.ajax(
            {
                method: method,
                url: baseAddress + relativeAddress,
                data: JSON.stringify(data),
                processData: false,
                dataType: 'json',
                beforeSend: function(jqXHR) {
                    for (var header in headers) {
                        if (headers.hasOwnProperty(header)) {
                            jqXHR.setRequestHeader(header, headers[header]);
                        }
                    }
                }
            }
        );
    };

    var Collection = function(resources) {

        var each = function(func) {
            for(var i = 0; i < resources.length; i++) {
                func(resources[i]);
            }
        };

        return {
        each: each
        }
    };

    
    var Config = function(id) {

        var attributes = {'Id': id};

        /**
         * Internal method for getting an instance attribute.
         *
         * @param attributeName
         * @returns {*}
         */
        var getAttribute = function(attributeName)
        {
            return attributes.hasOwnProperty(attributeName) ? attributes[attributeName] : undefined;
        };

        /**
         * Internal method for setting an instance attribute.
         *
         * @param attributeName
         * @param attributeValue
         */
        var setAttribute = function(attributeName, attributeValue)
        {
            attributes[attributeName] = attributeValue;
        };

        /**
         * Get the Id attribute for this config.
         *
         * @returns {*}
         */
        var getId = function()
        {
            return getAttribute('Id');
        };

        /**
         * Set the Key attribute for this config.
         *
         * @param newKey
         */
        var setKey = function(newKey)
        {
            setAttribute('Key', newKey);

            return this;
        };

        /**
         * Get the Key for this config.
         *
         * @returns {*}
         */
        var getKey = function()
        {
            return getAttribute('Key');
        };
    
        /**
         * Set the Value attribute for this config.
         *
         * @param newValue
         */
        var setValue = function(newValue)
        {
            setAttribute('Value', newValue);

            return this;
        };

        /**
         * Get the Value for this config.
         *
         * @returns {*}
         */
        var getValue = function()
        {
            return getAttribute('Value');
        };
    
        /**
         * Set the Type attribute for this config.
         *
         * @param newType
         */
        var setType = function(newType)
        {
            setAttribute('Type', newType);

            return this;
        };

        /**
         * Get the Type for this config.
         *
         * @returns {*}
         */
        var getType = function()
        {
            return getAttribute('Type');
        };
    
        /**
         * Set the Label attribute for this config.
         *
         * @param newLabel
         */
        var setLabel = function(newLabel)
        {
            setAttribute('Label', newLabel);

            return this;
        };

        /**
         * Get the Label for this config.
         *
         * @returns {*}
         */
        var getLabel = function()
        {
            return getAttribute('Label');
        };
    
        /**
         * Set the Note attribute for this config.
         *
         * @param newNote
         */
        var setNote = function(newNote)
        {
            setAttribute('Note', newNote);

            return this;
        };

        /**
         * Get the Note for this config.
         *
         * @returns {*}
         */
        var getNote = function()
        {
            return getAttribute('Note');
        };
    
        /**
         * Set the Group attribute for this config.
         *
         * @param newGroup
         */
        var setGroup = function(newGroup)
        {
            setAttribute('Group', newGroup);

            return this;
        };

        /**
         * Get the Group for this config.
         *
         * @returns {*}
         */
        var getGroup = function()
        {
            return getAttribute('Group');
        };
    
        /**
         * Set the Params attribute for this config.
         *
         * @param newParams
         */
        var setParams = function(newParams)
        {
            setAttribute('Params', newParams);

            return this;
        };

        /**
         * Get the Params for this config.
         *
         * @returns {*}
         */
        var getParams = function()
        {
            return getAttribute('Params');
        };
    
        /**
         * Perform the delete action for this config.
         *
         * @returns {*}
         */
        var remove = function()
        {
            return doAJAX(
                'DELETE',
                'configs/' + getId()
            ).then(function(result) {attributes = {}; return undefined;})
        };

        /**
         * Perform the retrieve action for this config.
         *
         * @returns {*}
         */
        var get = function()
        {
            var config = this;

            return doAJAX(
                'GET',
                'configs/' + getId()
            ).then(function(result) {attributes = result; return config;})
        };

        /**
        * Retrieve configs with attributes matching the current config.
        *
        * @returns {*}
        */
        var find = function()
        {
            return doAJAX(
                'GET',
                'configs/?' + $.param(attributes)
            ).then(function(result) {

                var results = [];
                for (var i = 0; i < result.data.length; i++) {
                    var config = Config(result.data[i].Id);

                    for (var name in result.data[i]) {
                        if (result.data[i].hasOwnProperty(name)) {
                            var setter = "set" + name;

                            if (config.hasOwnProperty(setter)) {
                                config[setter](result.data[i][name]);
                            }
                        }
                    }
                    results.push(config);
                }

                return Collection(results);
            })
        };

        /**
        * Retrieve  a single config with attributes matching the current config.
        *
        * @returns {*}
        */
        var findOne = function()
        {
            var findAttributes = attributes;

            findAttributes['limit'] = 1;

            return doAJAX(
                'GET',
                'configs/?' + $.param(findAttributes)
            ).then(function(result) {
        
                if (result.data.length > 0) {
                    var config = Config(result.data[0].Id);
            
                    for (var name in result.data[0]) {
                        if (result.data[0].hasOwnProperty(name)) {
                            var setter = "set" + name;
                    
                            if (config.hasOwnProperty(setter)) {
                                config[setter](result.data[0][name]);
                            }
                        }
                    }
                    
                    return config;
                } else {
                    return null;
                }
        
            })
        };
        
        /**
         * Perform the update or the create action for this config.
         * 
         * @returns {*}
         */
        var save = function()
        {
            var config = this;

            var ajax;

            if (typeof getId() === 'undefined') {
                ajax = doAJAX(
                    'POST',
                    'configs/',
                    attributes
                )
            } else {
                ajax = doAJAX(
                    'PUT',
                    'configs/' + getId(),
                    attributes
                )
            }

            return ajax.then(function(result) {attributes = result; return config;})
        };

        return {
            'get': get,
            'find': find,
            'findOne': findOne,
            'delete': remove,
            'save': save,
            'getId': getId,
'getKey': getKey,
            'setKey': setKey,
            'getValue': getValue,
            'setValue': setValue,
            'getType': getType,
            'setType': setType,
            'getLabel': getLabel,
            'setLabel': setLabel,
            'getNote': getNote,
            'setNote': setNote,
            'getGroup': getGroup,
            'setGroup': setGroup,
            'getParams': getParams,
            'setParams': setParams,
            
        }
    };
    
    var Meta = function(id) {

        var attributes = {'Id': id};

        /**
         * Internal method for getting an instance attribute.
         *
         * @param attributeName
         * @returns {*}
         */
        var getAttribute = function(attributeName)
        {
            return attributes.hasOwnProperty(attributeName) ? attributes[attributeName] : undefined;
        };

        /**
         * Internal method for setting an instance attribute.
         *
         * @param attributeName
         * @param attributeValue
         */
        var setAttribute = function(attributeName, attributeValue)
        {
            attributes[attributeName] = attributeValue;
        };

        /**
         * Get the Id attribute for this meta.
         *
         * @returns {*}
         */
        var getId = function()
        {
            return getAttribute('Id');
        };

        /**
         * Set the Name attribute for this meta.
         *
         * @param newName
         */
        var setName = function(newName)
        {
            setAttribute('Name', newName);

            return this;
        };

        /**
         * Get the Name for this meta.
         *
         * @returns {*}
         */
        var getName = function()
        {
            return getAttribute('Name');
        };
    
        /**
         * Set the Title attribute for this meta.
         *
         * @param newTitle
         */
        var setTitle = function(newTitle)
        {
            setAttribute('Title', newTitle);

            return this;
        };

        /**
         * Get the Title for this meta.
         *
         * @returns {*}
         */
        var getTitle = function()
        {
            return getAttribute('Title');
        };
    
        /**
         * Set the Description attribute for this meta.
         *
         * @param newDescription
         */
        var setDescription = function(newDescription)
        {
            setAttribute('Description', newDescription);

            return this;
        };

        /**
         * Get the Description for this meta.
         *
         * @returns {*}
         */
        var getDescription = function()
        {
            return getAttribute('Description');
        };
    
        /**
         * Set the Keywords attribute for this meta.
         *
         * @param newKeywords
         */
        var setKeywords = function(newKeywords)
        {
            setAttribute('Keywords', newKeywords);

            return this;
        };

        /**
         * Get the Keywords for this meta.
         *
         * @returns {*}
         */
        var getKeywords = function()
        {
            return getAttribute('Keywords');
        };
    
        /**
         * Set the Custom attribute for this meta.
         *
         * @param newCustom
         */
        var setCustom = function(newCustom)
        {
            setAttribute('Custom', newCustom);

            return this;
        };

        /**
         * Get the Custom for this meta.
         *
         * @returns {*}
         */
        var getCustom = function()
        {
            return getAttribute('Custom');
        };
    
        /**
         * Perform the delete action for this meta.
         *
         * @returns {*}
         */
        var remove = function()
        {
            return doAJAX(
                'DELETE',
                'metas/' + getId()
            ).then(function(result) {attributes = {}; return undefined;})
        };

        /**
         * Perform the retrieve action for this meta.
         *
         * @returns {*}
         */
        var get = function()
        {
            var meta = this;

            return doAJAX(
                'GET',
                'metas/' + getId()
            ).then(function(result) {attributes = result; return meta;})
        };

        /**
        * Retrieve metas with attributes matching the current meta.
        *
        * @returns {*}
        */
        var find = function()
        {
            return doAJAX(
                'GET',
                'metas/?' + $.param(attributes)
            ).then(function(result) {

                var results = [];
                for (var i = 0; i < result.data.length; i++) {
                    var meta = Meta(result.data[i].Id);

                    for (var name in result.data[i]) {
                        if (result.data[i].hasOwnProperty(name)) {
                            var setter = "set" + name;

                            if (meta.hasOwnProperty(setter)) {
                                meta[setter](result.data[i][name]);
                            }
                        }
                    }
                    results.push(meta);
                }

                return Collection(results);
            })
        };

        /**
        * Retrieve  a single meta with attributes matching the current meta.
        *
        * @returns {*}
        */
        var findOne = function()
        {
            var findAttributes = attributes;

            findAttributes['limit'] = 1;

            return doAJAX(
                'GET',
                'metas/?' + $.param(findAttributes)
            ).then(function(result) {
        
                if (result.data.length > 0) {
                    var meta = Meta(result.data[0].Id);
            
                    for (var name in result.data[0]) {
                        if (result.data[0].hasOwnProperty(name)) {
                            var setter = "set" + name;
                    
                            if (meta.hasOwnProperty(setter)) {
                                meta[setter](result.data[0][name]);
                            }
                        }
                    }
                    
                    return meta;
                } else {
                    return null;
                }
        
            })
        };
        
        /**
         * Perform the update or the create action for this meta.
         * 
         * @returns {*}
         */
        var save = function()
        {
            var meta = this;

            var ajax;

            if (typeof getId() === 'undefined') {
                ajax = doAJAX(
                    'POST',
                    'metas/',
                    attributes
                )
            } else {
                ajax = doAJAX(
                    'PUT',
                    'metas/' + getId(),
                    attributes
                )
            }

            return ajax.then(function(result) {attributes = result; return meta;})
        };

        return {
            'get': get,
            'find': find,
            'findOne': findOne,
            'delete': remove,
            'save': save,
            'getId': getId,
            'getName': getName,
            'setName': setName,
            'getTitle': getTitle,
            'setTitle': setTitle,
            'getDescription': getDescription,
            'setDescription': setDescription,
            'getKeywords': getKeywords,
            'setKeywords': setKeywords,
            'getCustom': getCustom,
            'setCustom': setCustom,
            
        }
    };
    
    var User = function(id) {

        var attributes = {'Id': id};

        /**
         * Internal method for getting an instance attribute.
         *
         * @param attributeName
         * @returns {*}
         */
        var getAttribute = function(attributeName)
        {
            return attributes.hasOwnProperty(attributeName) ? attributes[attributeName] : undefined;
        };

        /**
         * Internal method for setting an instance attribute.
         *
         * @param attributeName
         * @param attributeValue
         */
        var setAttribute = function(attributeName, attributeValue)
        {
            attributes[attributeName] = attributeValue;
        };

        /**
         * Get the Id attribute for this user.
         *
         * @returns {*}
         */
        var getId = function()
        {
            return getAttribute('Id');
        };

        /**
         * Set the Email attribute for this user.
         *
         * @param newEmail
         */
        var setEmail = function(newEmail)
        {
            setAttribute('Email', newEmail);

            return this;
        };

        /**
         * Get the Email for this user.
         *
         * @returns {*}
         */
        var getEmail = function()
        {
            return getAttribute('Email');
        };
    
        /**
         * Set the Password attribute for this user.
         *
         * @param newPassword
         */
        var setPassword = function(newPassword)
        {
            setAttribute('Password', newPassword);

            return this;
        };

        /**
         * Get the Password for this user.
         *
         * @returns {*}
         */
        var getPassword = function()
        {
            return getAttribute('Password');
        };
    
        /**
         * Set the FirstName attribute for this user.
         *
         * @param newFirstName
         */
        var setFirstName = function(newFirstName)
        {
            setAttribute('FirstName', newFirstName);

            return this;
        };

        /**
         * Get the FirstName for this user.
         *
         * @returns {*}
         */
        var getFirstName = function()
        {
            return getAttribute('FirstName');
        };
    
        /**
         * Set the LastName attribute for this user.
         *
         * @param newLastName
         */
        var setLastName = function(newLastName)
        {
            setAttribute('LastName', newLastName);

            return this;
        };

        /**
         * Get the LastName for this user.
         *
         * @returns {*}
         */
        var getLastName = function()
        {
            return getAttribute('LastName');
        };
    
        /**
         * Set the DtCreated attribute for this user.
         *
         * @param newDtCreated
         */
        var setDtCreated = function(newDtCreated)
        {
            setAttribute('DtCreated', newDtCreated);

            return this;
        };

        /**
         * Get the DtCreated for this user.
         *
         * @returns {*}
         */
        var getDtCreated = function()
        {
            return getAttribute('DtCreated');
        };
    
        /**
         * Set the DtLastSignin attribute for this user.
         *
         * @param newDtLastSignin
         */
        var setDtLastSignin = function(newDtLastSignin)
        {
            setAttribute('DtLastSignin', newDtLastSignin);

            return this;
        };

        /**
         * Get the DtLastSignin for this user.
         *
         * @returns {*}
         */
        var getDtLastSignin = function()
        {
            return getAttribute('DtLastSignin');
        };
    
        /**
         * Set the HybridauthProviderName attribute for this user.
         *
         * @param newHybridauthProviderName
         */
        var setHybridauthProviderName = function(newHybridauthProviderName)
        {
            setAttribute('HybridauthProviderName', newHybridauthProviderName);

            return this;
        };

        /**
         * Get the HybridauthProviderName for this user.
         *
         * @returns {*}
         */
        var getHybridauthProviderName = function()
        {
            return getAttribute('HybridauthProviderName');
        };
    
        /**
         * Set the HybridauthProviderUid attribute for this user.
         *
         * @param newHybridauthProviderUid
         */
        var setHybridauthProviderUid = function(newHybridauthProviderUid)
        {
            setAttribute('HybridauthProviderUid', newHybridauthProviderUid);

            return this;
        };

        /**
         * Get the HybridauthProviderUid for this user.
         *
         * @returns {*}
         */
        var getHybridauthProviderUid = function()
        {
            return getAttribute('HybridauthProviderUid');
        };
    
        /**
         * Set the Init attribute for this user.
         *
         * @param newInit
         */
        var setInit = function(newInit)
        {
            setAttribute('Init', newInit);

            return this;
        };

        /**
         * Get the Init for this user.
         *
         * @returns {*}
         */
        var getInit = function()
        {
            return getAttribute('Init');
        };
    
        /**
         * Set the Restore attribute for this user.
         *
         * @param newRestore
         */
        var setRestore = function(newRestore)
        {
            setAttribute('Restore', newRestore);

            return this;
        };

        /**
         * Get the Restore for this user.
         *
         * @returns {*}
         */
        var getRestore = function()
        {
            return getAttribute('Restore');
        };
    
        /**
         * Set the Privilege attribute for this user.
         *
         * @param newPrivilege
         */
        var setPrivilege = function(newPrivilege)
        {
            setAttribute('Privilege', newPrivilege);

            return this;
        };

        /**
         * Get the Privilege for this user.
         *
         * @returns {*}
         */
        var getPrivilege = function()
        {
            return getAttribute('Privilege');
        };
    
        /**
         * Perform the delete action for this user.
         *
         * @returns {*}
         */
        var remove = function()
        {
            return doAJAX(
                'DELETE',
                'users/' + getId()
            ).then(function(result) {attributes = {}; return undefined;})
        };

        /**
         * Perform the retrieve action for this user.
         *
         * @returns {*}
         */
        var get = function()
        {
            var user = this;

            return doAJAX(
                'GET',
                'users/' + getId()
            ).then(function(result) {attributes = result; return user;})
        };

        /**
        * Retrieve users with attributes matching the current user.
        *
        * @returns {*}
        */
        var find = function()
        {
            return doAJAX(
                'GET',
                'users/?' + $.param(attributes)
            ).then(function(result) {

                var results = [];
                for (var i = 0; i < result.data.length; i++) {
                    var user = User(result.data[i].Id);

                    for (var name in result.data[i]) {
                        if (result.data[i].hasOwnProperty(name)) {
                            var setter = "set" + name;

                            if (user.hasOwnProperty(setter)) {
                                user[setter](result.data[i][name]);
                            }
                        }
                    }
                    results.push(user);
                }

                return Collection(results);
            })
        };

        /**
        * Retrieve  a single user with attributes matching the current user.
        *
        * @returns {*}
        */
        var findOne = function()
        {
            var findAttributes = attributes;

            findAttributes['limit'] = 1;

            return doAJAX(
                'GET',
                'users/?' + $.param(findAttributes)
            ).then(function(result) {
        
                if (result.data.length > 0) {
                    var user = User(result.data[0].Id);
            
                    for (var name in result.data[0]) {
                        if (result.data[0].hasOwnProperty(name)) {
                            var setter = "set" + name;
                    
                            if (user.hasOwnProperty(setter)) {
                                user[setter](result.data[0][name]);
                            }
                        }
                    }
                    
                    return user;
                } else {
                    return null;
                }
        
            })
        };
        
        /**
         * Perform the update or the create action for this user.
         * 
         * @returns {*}
         */
        var save = function()
        {
            var user = this;

            var ajax;

            if (typeof getId() === 'undefined') {
                ajax = doAJAX(
                    'POST',
                    'users/',
                    attributes
                )
            } else {
                ajax = doAJAX(
                    'PUT',
                    'users/' + getId(),
                    attributes
                )
            }

            return ajax.then(function(result) {attributes = result; return user;})
        };

        return {
            'get': get,
            'find': find,
            'findOne': findOne,
            'delete': remove,
            'save': save,
            'getId': getId,
            'getEmail': getEmail,
            'setEmail': setEmail,
            'getPassword': getPassword,
            'setPassword': setPassword,
            'getFirstName': getFirstName,
            'setFirstName': setFirstName,
            'getLastName': getLastName,
            'setLastName': setLastName,
            'getDtCreated': getDtCreated,
            'setDtCreated': setDtCreated,
            'getDtLastSignin': getDtLastSignin,
            'setDtLastSignin': setDtLastSignin,
            'getHybridauthProviderName': getHybridauthProviderName,
            'setHybridauthProviderName': setHybridauthProviderName,
            'getHybridauthProviderUid': getHybridauthProviderUid,
            'setHybridauthProviderUid': setHybridauthProviderUid,
            'getInit': getInit,
            'setInit': setInit,
            'getRestore': getRestore,
            'setRestore': setRestore,
            'getPrivilege': getPrivilege,
            'setPrivilege': setPrivilege,
            
        }
    };
        
    return function(data) {
        baseAddress = data.baseAddress;
        headers = data.headers;

        return {
            'configs': Config,
            'metas': Meta,
            'users': User,
            
        }
    };

})();
